name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:       # See https://stackoverflow.com/questions/57699839/github-actions-how-to-target-all-branches-except-master for choices
      - '**'        # matches every branch

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: blog

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get docker image version
        id: docker_version
        run: | 
          echo "::set-output name=version::$(git ls-files -s Dockerfile | awk '{print $2}' | cut -c1-16)"

      - name: Check if image exists
        id: image_exists
        run: |
          response=$(docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ steps.docker_version.outputs.version }} > /dev/null ; echo $?)
          echo ::set-output name=image_exists::$(echo ${response})

      - name: Build docker image if it is not on registry
        if: ${{ steps.image_exists.outputs.image_exists == 1 }}
        run: make image

      - name: Login to Dockerhub
        if: ${{ steps.image_exists.outputs.image_exists == 1 }}
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to Docker hub Registry
        if: ${{ steps.image_exists.outputs.image_exists == 1 }}
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(git ls-files -s Dockerfile | awk '{print $2}' | cut -c1-16)

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo IMAGE_NAME=$IMAGE_NAME

          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$VERSION $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

      - name: Login to github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to Github Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag ${{ github.actor }}/$IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION